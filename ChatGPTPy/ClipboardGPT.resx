<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="txtCopyScript.Text" xml:space="preserve">
    <value>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.22.0/prism.min.js"&gt;&lt;/script&gt;    
&lt;script&gt;
      function addCopyButtons() {
        // Get all code segments on the page
        var codeBlocks = document.querySelectorAll("pre code");
        
        // Iterate through the code segments
        for (var i = 0; i &lt; codeBlocks.length; i++) {
          // Create a new button element
          Prism.highlightElement(codeBlocks[i]);

          var copyButton = document.createElement("button");
          
          // Set the button's text to "Copy"
          copyButton.innerHTML = "Copy";
          
          // Set the button's class to "copy-button"
          copyButton.className = "copy-button";
          
          // Add the button to the current code segment
          codeBlocks[i].parentNode.insertBefore(copyButton, codeBlocks[i]);
          
          // Add a click event listener to the button
          copyButton.addEventListener("click", function(event) {
            // Get the code segment that the button belongs to
            var codeBlock = event.target.nextSibling;
            
            // Select the code segment's text
            var range = document.createRange();
            range.selectNode(codeBlock);
            window.getSelection().addRange(range);
            
            // Copy the selected text to the clipboard
            document.execCommand("copy");
            
            // Deselect the text
            window.getSelection().removeAllRanges();
          });
        }
      }
      
      // Add the copy buttons when the page loads
      document.addEventListener("DOMContentLoaded", function() {
        addCopyButtons();
      });
    &lt;/script&gt;</value>
  </data>
  <metadata name="notifyIcon1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>118, 17</value>
  </metadata>
</root>